#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu May 10 19:19:17 2018

@author: johnny
"""

import subprocess
import os

from numpy import pi, sqrt
import time
from datetime import timedelta
import argparse
import ast

import sys
script_dir = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.dirname(script_dir)
print(parent_dir)
sys.path.append(parent_dir)

from Utils import utils as utils

isfile = os.path.isfile

SignumGordonPotential = 2

parser = argparse.ArgumentParser()
parser.add_argument('--t', '-t',
                    help="Total simulation time per simulation.",
                    type=float,
                    default=3.5)
parser.add_argument('--L', '-L',
                    help="Simulation width.",
                    type=float,
                    default=7.0)
parser.add_argument('--N', '-N',
                    help="Simulation resolution.",
                    type=int,
                    default=2 ** 12)
parser.add_argument('--V', '-V',
                    help="Potential (default: SG). 2:SG; 1:KG; 0:massless",
                    type=int,
                    default=SignumGordonPotential)
parser.add_argument('--A', '-A',
                    help="Amplitude of oscillation.",
                    type=float,
                    default=1.0)
parser.add_argument('--n_modes', '-n',
                    help="Sweep k=2πn/L (n_min, n_max). Example \'--n_modes 5 100\' will sweep "
                         "\'k\' from 10π/L to 200π/L steps.",
                    nargs=2,
                    type=int,
                    default=(1, 10))
parser.add_argument('--max_procs',
                    help="Maximum number of parallel running programs.",
                    type=int,
                    default=7)
parser.add_argument('--r', '-r',
                    help="The dt/h parameter of the simulation.",
                    type=float,
                    default=0.1)
parser.add_argument('--adjust_omega_to_mass', '-m',
                    help="Automatically adjust angular frequency to mass, and also the mass for the "
                         "signum-Gordon potential.",
                    action='store_true')
parser.add_argument('--tdft_len',
                    help="See '--time_dft_length' in RtoR-Modes.",
                    type=float,
                    default=-1)
parser.add_argument('--tdft_delta',
                    help="See '--time_dft_delta' in RtoR-Modes.",
                    type=float,
                    default=-1)
parser.add_argument('--show_outputs', '-s', help="Show stdout and stderr from process.", action='store_true')


args = parser.parse_args()

MAX_PROCS = args.max_procs

t = args.t
L = args.L
N = args.N
V = args.V
r = args.r
t_len = args.tdft_len
t_delta = args.tdft_delta

A = args.A
n_min, n_max = args.n_modes
sim_list = []

show_outputs = args.show_outputs

f = '{:.6f}'.format

for n in range(n_min, n_max+1):
    dk = 2 * pi / L
    dohm = 2*pi / L  # yes, 'L'. This is how RtoR-Modes unpacks angular frequency harmonics.

    k = n*dk
    omega = n*dohm
    mass_sqr = 1

    if args.adjust_omega_to_mass:
        if V == SignumGordonPotential:
            mass_sqr = 4/(pi*A)

        omega = sqrt(k**2+mass_sqr)

    k_n = k / dk

    omega_n = omega / dohm
    arg_list = ["Fields-RtoR-Modes-wkA",
                '--dev=0',
                '-t' + f(t), '-L' + f(L), '-N'+str(N),
                '-A' + f(A),
                '-w'+f(omega_n),
                '-k'+f(k_n),
                '--th=1', '--r_dt=' + f(r),
                '--time_dft_snapshot', '--time_dft_length='+f(t_len), '--time_dft_delta='+f(t_delta),
                '--outN='+str(N), '--BC=1', '-V'+str(V), '--massSqr='+str(mass_sqr)]

    sim_info = (n, k)
    sim_list.append((arg_list, sim_info))


proc_tuples = []
dead_procs = []
total = len(sim_list)
total_time = 0.0
n = 0
while len(sim_list) or not (len(dead_procs) == total):
    while not len(proc_tuples) == MAX_PROCS and len(sim_list):
        sim = sim_list.pop()
        sim_info_str = utils.yellow('n=%i k=%.5f' % (sim[1]))
        program_call = sim[0]

        print(total - len(sim_list), '/', total, ' STARTING with', sim_info_str, ' '.join(program_call), end='. ')

        #output = subprocess.DEVNULL
        output = subprocess.PIPE

        proc = subprocess.Popen(program_call, stdout=output, stderr=output, text=True)
        proc_tuples.append((proc, time.time()))

        print('PID', proc.pid, end=". ")

        print("")

    for proc_tuple in proc_tuples:
        proc = proc_tuple[0]
        poll = proc.poll()
        if proc.returncode is not None:
            el_time = time.time() - proc_tuple[1]
            total_time += el_time

            n += 1

            dead_procs.append((proc, el_time))
            proc_tuples.remove(proc_tuple)

            success = proc.returncode == 0

            ret_code_string = utils.okfail('return code ' + str(proc.returncode), not success)
            avg_string = utils.blue('Avg ' + f(total_time / n))
            expected_string = utils.Bblue(
                'expected ~' + str(timedelta(seconds=(total_time / n) * (len(sim_list) / MAX_PROCS))))

            print('FINISHED', proc.pid, ret_code_string,
                  'approx. elapsed time', f(el_time), 'sec.', avg_string,
                  expected_string)

            if not success:
                out, err = proc.communicate()
                print("\n\n\n")
                #print(out.decode('utf-8'))
                print(out)
                print("\nErr:\n")
                #print(err.decode('utf-8'))
                print(err)
                print("\n\n\n")

        elif show_outputs:
            output = proc.stdout.readline().strip()
            if output == '' and proc.poll() is not None:
                pass
            else:
                print("({}) ".format(proc.pid) + output)

    if not show_outputs:
        time.sleep(.1)

print('\n\nAll done.\n\n')
