#!/usr/bin/env python3

# -*- coding: utf-8 -*-

import argparse, sys

sys.path.insert(0, '/home/joao/Developer/StudioSlab/Lib/Python/')

from PySLib.Tools import Utils

parser = argparse.ArgumentParser()
parser.add_argument('--files', help="Filename(s). Default is all files in folder.", nargs='*', default='./*.oscb')
parser.add_argument('--threads', '-t', help='Number of threads to use. Default is 1.', type=int, default=1)

parser.add_argument('--region', help="Region to plot. Must be 4-tuple representing (xmin, xmax, ymin, ymax). Example "
                                     "--region=(-3,3,0,4)", nargs=4, type=float)

parser.add_argument('--fit', '-f', help="Fit shockwave.", action='store_true')
parser.add_argument('--nfit', help='Number of zeroes to fit shockwave. Defaults to 10.', type=int, default=10)
parser.add_argument('--fitguess', help='Guess t0 and a0 for shockwave fitting. Example: --fitGuess 0.5 0.7', nargs=2,
                    type=float, default=None)
parser.add_argument('--fitlinescolor', help='Color of the fit lines. Can be anything Matplotlib accepts.', type=str,
                    default='black')
parser.add_argument('--lwidth', help="Fit lines width", type=float, default=0.8)
parser.add_argument('--fit_debug', help="Show fit debug graphs + info. Halts execution.", action='store_true')
parser.add_argument('--regen', '-r', help="Re-generate existing outputs.", action='store_true')
parser.add_argument('--linear', '-l', help='Plot linear scale.', action='store_true')
parser.add_argument('--logeps', help="When using log scale, formula is sign(phi)*log(abs(phi)/eps + 1), where epsilon "
                                     "determines the amount of detail near 0 (zero) to reveal. Smaller epsilon reveals "
                                     "more detail. Default is 1.e-6.", type=float, default=1.e-6)
parser.add_argument('--showresult', '-s', help="Show end result of each plot. Halts process for every plot until plot "
                                               "closed.", action='store_true')

parser.add_argument('--fieldvalueenergy', '-e', help="Plot energy density instead of field value.", action='store_true')
parser.add_argument('--noframe', '-nf', help="Don't draw figure frame.", action='store_true')
parser.add_argument('--showcolorbar', '-sc', help="Show colorbar.", action='store_true')
parser.add_argument('--showhistory', '-sh', help="Show interactive history plot (thanks JP!).", action='store_true')
parser.add_argument('--cleanup', '-c', help="Cleanup sim file after plotting (only removes if file has not been "
                                            "plotted before).", action='store_true')
parser.add_argument('--ext', help="File extension. Defaults to .pdf. Can be anything supported by matplotlib.",
                    type=str, default='.pdf')
parser.add_argument('--labelroom', '-lr', help="Try to put t and x labels up in axis to gain room. "
                                               "*** Experimental ***", action='store_true')

parser.add_argument('--fontsize', help='Font size for label and annotations.', type=float, default=8)
parser.add_argument('--fontsizeticks', help='Font size for ticks (colorbar and axis numbers', type=float, default=8)
parser.add_argument('--apos', help='Position of annotations in normalized coordinates of plot region, with anchor in '
                                   'bottom left corner of image. Format is (x, y). Negative values mean no '
                                   'annotation.', nargs=2, type=float, default=(0.1,0.1))
parser.add_argument('--annotate', help='Sim parameters to annotate. Can also annotate strings, just precede with \'.\' '
                                       'Example: \".Shockwave, v, shDelta=\\delta, V\"', type=str, default="")
parser.add_argument('--draw_box', help="Draw a dashed box somewhere --> xmin xmax tmin tmax. "
                                       "Example --draw_box=(-3,3,0,4)", nargs=4, type=float)
parser.add_argument('--acolor', help='Annotation color.', type=str, default='k')
parser.add_argument('--showselfsimilar', '-ss', help='Show self-similar part of solution (works for perturbed oscillon '
                                                     'sim only).', action='store_true')

parser.add_argument('--cmap', help="Choose cmap. Default is auto (will adapt to sim). "
                                   "See https://matplotlib.org/users/colormaps.html.", default=None)
parser.add_argument('--xlabel', help='Horizontal axis label. Defaults to $x$.', type=str, default='$x$')
parser.add_argument('--ylabel', help='Vertical axis label. Defaults to $t$.', type=str, default='$t$')
parser.add_argument('--dpi', help='Image DPI', type=int, default = 300)
parser.add_argument('--width', help='Image width in inches. Height is calculated via aspect ratio=L/T.', type=float,
                    default=5)

parser.add_argument('--rangemode', '-m', help="Range mode:\n" +
                                              "\t0: auto (based on field min and max);\n"
                                              "\t1: symmetric based on min;\n"
                                              "\t2: symmetric based on max;\n"
                                              "\t3: manual (set with options --vmin and --vmax);", type=int, default=0)
parser.add_argument('--vmin', help='Minimum value of field, in scale. ' + Utils.WARNING + 'Must properly set '
                                                    '--rangemode argument!.' + Utils.ENDC, type=float, default=-1.)
parser.add_argument('--vmax', help='Maximum value of field, in scale. ' + Utils.WARNING + 'Must properly set '
                                                    '--rangemode argument!.' + Utils.ENDC, type=float, default= 1.)

parser.add_argument('--nameappend', help='Append string to output name.', type=str, default='')
parser.add_argument('--outf', help='Output folder. Default is ./', type=str, default='./')

args = parser.parse_args()

print(args.files)

if not args.showresult and not args.showhistory and not args.fit_debug:
    from matplotlib import use as backend
    from matplotlib import rcParams
    backend('Agg')
    print("Using Agg backend. Font family:", rcParams['font.family'][0])
else:
    from matplotlib import use as backend
    from matplotlib import rcParams
    backend('Qt5Agg')
    print("Using Qt5Agg backend. Font family:", rcParams['font.family'][0])

# ******************************************************************************
# ******************************************************************************
# matplotlib.use tem que ser chamado ANTES de muita coisa. Por isso a maioria
# dos includes, exceto os absolutamente essenciais, estao abaixo dessa inicia-
# lizacao.
# ******************************************************************************
# ******************************************************************************
import plot_single
from DataAnalysis.SimData import open_sim
from DataAnalysis.Fitting import fit_shockwave
from os.path import isfile
from os import remove
from time import time
from traceback import format_exc

files = None
if type(args.files) is list:
    files = args.files
else:
    import glob
    files = glob.glob(args.files)
    files.sort()

size = len(files)
totalTime=0
n = 0
outputExtension = '.' + args.ext.lstrip('.')

def doFile(file):
    if not isfile(file):
        print("Invalid file \"" + file + "\"")
        return

    global size, n, totalTime
    t0 = time()
    print()
    print(Utils.OKBLUE+"Started"+Utils.BOLD, files.index(file)+1, "/", size,
          Utils.ENDC, file, ': ')
    outputFileName = args.outf + '/' + file.rstrip('.oscb') + args.nameappend + outputExtension
    if isfile(outputFileName):
        if not args.regen and not args.showresult:
            print(Utils.OKGREEN + "already built." + Utils.ENDC)
            return
    else:
        print()

    try:
        #sim_result = open_sim.open_sim(file)
        #sim_result = open_sim.SimData(file)
        sim_result = open_sim.OpenSimData(file)

        fit_params = None
        if args.fit:
            fit_params = fit_shockwave.fit(sim_result['phi'], sim_result['T'], \
                                           n_curves=args.nfit, \
                                           initGuess=args.fitguess,
                                           show_debug_info=args.fit_debug)
            fit_params['lwidth'] = args.lwidth
            fit_params['fitlinescolor'] = args.fitlinescolor

        plot_single.plot(sim_result, fit_params, args=args, showLog = not args.linear, logEpsilon=args.logeps,
                         showResult=args.showresult, show_colorbar=args.showcolorbar, extension = outputExtension,
                         fontsize=args.fontsize, fontsize_ticks=args.fontsizeticks, dpi=args.dpi, imgWidthInches=args.width,
                         region=args.region, annotationPosition=args.apos,
                         annotations=args.annotate, annotationColor=args.acolor, outputFileName=outputFileName,
                         xlabel=args.xlabel, ylabel=args.ylabel, cmap=args.cmap, showZeros=False,
                         showBorderLightCone=False, showBorderConeVertex=False, showEnergyDens=args.fieldvalueenergy,
                         valueRange=(args.rangemode, args.vmin, args.vmax), noframe=args.noframe, labelroom=args.labelroom,
                         draw_box=args.draw_box)

        if args.showhistory:
            plot_single.showHistory(sim_result, showLog = not args.linear)

        if args.cleanup:
            print("Cleaning up.")
            remove(file)
    except Exception as e:
        print(Utils.WARNING + format_exc() + Utils.ENDC)

    tf = time()
    totalTime += (tf-t0)
    n+=1

    print(Utils.OKGREEN+"Ended"+Utils.BOLD, files.index(file)+1, "/", size,
          Utils.ENDC)

    print('El. time:', tf-t0, '   total time:', totalTime)
    print('Total expected time to completion:', (totalTime/n * (len(files)-n)) / args.threads )

if __name__ == "__main__":
    from multiprocessing import Pool

    print(files)

    if(args.threads > 1):
        p = Pool(args.threads)
        p.map(doFile, files)

    else:
        for file in files:
            doFile(file)
